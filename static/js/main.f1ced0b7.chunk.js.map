{"version":3,"sources":["assets/images/ateliware-icon.svg","assets/images/ateliware-logo.svg","assets/global/colors.js","components/Form/styled.js","components/Form/Input/index.js","components/Form/Button/index.js","assets/global/styled.js","assets/global/fonts.js","containers/App/styled.js","containers/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","colors","red400","gray100","gray400","black","white","StyledField","styled","div","StyledInput","input","StyledButton","button","Input","React","forwardRef","ref","props","Button","children","StyledWrapper","fonts","primary","secondary","StyledSignature","section","StyledSignatureHeader","header","StyledSignatureContainer","form","StyledSignatureFields","StyledSignatureActions","StyledSignaturePreview","StyledSignatureImage","StyledSignatureInfo","StyledSignatureName","h3","StyledSignatureRole","p","StyledSignatureEmail","StyledSignaturePhone","StyledNotice","copied","App","useState","name","setName","role","setRole","email","setEmail","phone","setPhone","setCopied","useForm","register","watch","preview","useRef","copyHTML","clearRange","setTimeout","window","getSelection","removeAllRanges","useEffect","clipboard","ClipboardJS","current","text","outerHTML","on","err","console","log","href","target","rel","src","iconAteliware","width","height","alt","type","onChange","placeholder","required","event","value","replace","onClick","container","range","document","createRange","selectNode","addRange","execCommand","copyText","logoAteliware","style","margin","fontFamily","color","fontSize","fontWeight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f1ced0b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ateliware-icon.dd2fe3e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/ateliware-logo.d2523293.svg\";","const colors = {\n  red400: '#ef0044',\n  gray100: '#dddddd',\n  gray400: '#444444',\n  black: '#000000',\n  white: '#ffffff'\n};\n\nexport default colors;\n","import styled from 'styled-components';\nimport colors from 'assets/global/colors';\n\nexport const StyledField = styled.div`\n  display: block;\n  width: 100%;\n`;\n\nexport const StyledInput = styled.input`\n  display: block;\n  width: 100%;\n  padding: 10px 20px;\n  border: 1px solid ${colors.gray400};\n  border-radius: 4px;\n`;\n\nexport const StyledButton = styled.button`\n  display: inline-block;\n  padding: 10px 20px;\n  color: ${colors.red400};\n  border: 1px solid ${colors.red400};\n  background-color: ${colors.white};\n  transition: all 0.2s ease-in-out;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    color: ${colors.white};\n    background-color: ${colors.red400};\n  }\n`;\n","import React from 'react';\nimport { StyledField, StyledInput } from '../styled';\n\nconst Input = React.forwardRef(({ ...props }, ref) => {\n  return (\n    <StyledField>\n      <StyledInput ref={ref} {...props} />\n    </StyledField>\n  );\n});\n\nexport default Input;\n","import React from 'react';\nimport { StyledButton } from '../styled';\n\nconst Button = React.forwardRef(({ children, ...props }, ref) => {\n  return (\n    <StyledButton ref={ref} {...props}>\n      {children}\n    </StyledButton>\n  );\n});\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const StyledWrapper = styled.div`\n  display: block;\n  max-width: 1440px;\n  margin: 0 auto;\n  padding: 0 24px;\n`;\n","const fonts = {\n  primary: \"'Poppins', sans-serif\",\n  secondary: \"'Open Sans', sans-serif\"\n};\n\nexport default fonts;\n","import styled from 'styled-components';\nimport { StyledWrapper } from 'assets/global/styled';\nimport colors from 'assets/global/colors';\nimport fonts from 'assets/global/fonts';\n\nexport const StyledSignature = styled.section`\n  display: block;\n  width: 100%;\n\n  ${StyledWrapper} {\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n  }\n`;\n\nexport const StyledSignatureHeader = styled.header`\n  display: block;\n\n  ${StyledWrapper} {\n    align-items: center;\n  }\n`;\n\nexport const StyledSignatureContainer = styled.form`\n  display: block;\n  width: 45%;\n`;\n\nexport const StyledSignatureFields = styled.div`\n  margin-top: 15px;\n\n  &:first-child {\n    margin-top: 0;\n  }\n`;\n\nexport const StyledSignatureActions = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  margin: -10px;\n\n  button {\n    margin: 10px;\n  }\n`;\n\nexport const StyledSignaturePreview = styled.div`\n  display: block;\n  width: 45%;\n`;\n\nexport const StyledSignatureImage = styled.div`\n  display: block;\n  width: 100%;\n`;\n\nexport const StyledSignatureInfo = styled.div`\n  p {\n    margin: 2px 0;\n  }\n`;\n\nexport const StyledSignatureName = styled.h3`\n  margin: 0;\n  font-family: ${fonts.primary};\n  color: ${colors.red400};\n`;\n\nexport const StyledSignatureRole = styled.p`\n  font-family: ${fonts.secondary};\n  font-size: 15px;\n  font-weight: 700;\n  color: ${colors.black};\n`;\n\nexport const StyledSignatureEmail = styled.p`\n  font-family: ${fonts.secondary};\n  font-size: 15px;\n  color: ${colors.gray400};\n`;\n\nexport const StyledSignaturePhone = styled.p`\n  font-family: ${fonts.secondary};\n  font-size: 15px;\n  color: ${colors.gray400};\n`;\n\nexport const StyledNotice = styled.div`\n  margin: 0;\n  padding: 20px 30px;\n  font-family: ${fonts.primary};\n  color: ${colors.gray100};\n  background-color: ${colors.red400};\n  border-radius: 4px;\n  opacity: ${(props) => (props.copied ? '1' : '0')};\n  transform: ${(props) =>\n    props.copied ? 'translateX(0)' : 'translateX(500px)'};\n  transform: ${(props) =>\n    props.copied\n      ? 'translate3d(0, 0, 0)'\n      : 'translate3d(500px, 0, 0)'};\n  transition: all 0.2s linear;\n`;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport ClipboardJS from 'clipboard';\nimport Input from 'components/Form/Input';\nimport Button from 'components/Form/Button';\nimport { StyledWrapper } from 'assets/global/styled';\nimport {\n  StyledSignature,\n  StyledSignatureHeader,\n  StyledSignatureContainer,\n  StyledSignatureFields,\n  StyledSignatureActions,\n  StyledSignaturePreview,\n  StyledSignatureImage,\n  StyledSignatureInfo,\n  StyledSignatureName,\n  StyledSignatureRole,\n  StyledSignatureEmail,\n  StyledSignaturePhone,\n  StyledNotice\n} from './styled';\nimport colors from 'assets/global/colors';\nimport fonts from 'assets/global/fonts';\nimport iconAteliware from 'assets/images/ateliware-icon.svg';\nimport logoAteliware from 'assets/images/ateliware-logo.svg';\n\nconst App = () => {\n  const [name, setName] = useState('');\n  const [role, setRole] = useState('');\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n  const [copied, setCopied] = useState(false);\n  const { register, watch } = useForm();\n  const preview = useRef(null);\n  const copyHTML = useRef(null);\n\n  const phoneNumberMasked = (value) => {\n    return value\n      .replace(/\\D/g, '')\n      .replace(/(\\d{2})(\\d)/, '$1 $2')\n      .replace(/(\\d{4})(\\d)/, '$1-$2')\n      .replace(/(\\d{4})-(\\d)(\\d{4})/, '$1$2-$3')\n      .replace(/(-\\d{4})\\d+?$/, '$1');\n  };\n\n  const clearRange = () => {\n    setTimeout(() => {\n      window.getSelection().removeAllRanges();\n      setCopied(false);\n    }, 5000);\n  };\n\n  const copyText = () => {\n    window.getSelection().removeAllRanges();\n\n    const container = preview.current;\n    const range = document.createRange();\n\n    range.selectNode(container);\n    window.getSelection().addRange(range);\n    document.execCommand('Copy');\n\n    setCopied(true);\n    clearRange();\n  };\n\n  useEffect(() => {\n    const clipboard = new ClipboardJS(copyHTML.current, {\n      text: () => {\n        return preview.current.outerHTML;\n      }\n    });\n\n    clipboard.on('success', () => {\n      setCopied(true);\n      clearRange();\n    });\n\n    clipboard.on('error', (err) => {\n      console.log(err);\n      setCopied(false);\n      clearRange();\n    });\n  }, [copyHTML]);\n\n  return (\n    <StyledSignature>\n      <StyledSignatureHeader>\n        <StyledWrapper>\n          <h1>\n            <a\n              href=\"https://ateliware.com/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <img\n                src={iconAteliware}\n                width=\"60\"\n                height=\"auto\"\n                alt=\"Ateliware\"\n              />\n            </a>\n          </h1>\n\n          <StyledNotice copied={copied}>Copiado!</StyledNotice>\n        </StyledWrapper>\n      </StyledSignatureHeader>\n      <StyledWrapper>\n        <StyledSignatureContainer>\n          <StyledSignatureFields>\n            <Input\n              type=\"text\"\n              name=\"name\"\n              onChange={() => {\n                setName(watch('name'));\n              }}\n              placeholder=\"Insira seu nome\"\n              ref={register({ required: false })}\n            />\n          </StyledSignatureFields>\n          <StyledSignatureFields>\n            <Input\n              type=\"text\"\n              name=\"role\"\n              onChange={() => {\n                setRole(watch('role'));\n              }}\n              placeholder=\"Insira seu cargo\"\n              ref={register({ required: false })}\n            />\n          </StyledSignatureFields>\n          <StyledSignatureFields>\n            <Input\n              type=\"email\"\n              name=\"email\"\n              onChange={() => {\n                setEmail(watch('email'));\n              }}\n              placeholder=\"Insira seu e-mail\"\n              ref={register({ required: false })}\n            />\n          </StyledSignatureFields>\n\n          <StyledSignatureFields>\n            <Input\n              type=\"tel\"\n              name=\"phone\"\n              onChange={(event) => {\n                event.target.value = phoneNumberMasked(\n                  event.target.value\n                );\n                setPhone(watch('phone'));\n              }}\n              placeholder=\"Insira seu telefone\"\n              ref={register({ required: false })}\n            />\n          </StyledSignatureFields>\n          <StyledSignatureFields>\n            <StyledSignatureActions>\n              <Button\n                type=\"button\"\n                onClick={() => {\n                  copyText();\n                }}\n              >\n                Copiar assinatura\n              </Button>\n              <Button type=\"button\" ref={copyHTML}>\n                Copiar em HTML\n              </Button>\n            </StyledSignatureActions>\n          </StyledSignatureFields>\n        </StyledSignatureContainer>\n        <StyledSignaturePreview ref={preview}>\n          <StyledSignatureImage>\n            <a\n              href=\"https://ateliware.com/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <img\n                src={logoAteliware}\n                width=\"200\"\n                height=\"auto\"\n                alt=\"Ateliware\"\n              />\n            </a>\n          </StyledSignatureImage>\n          <StyledSignatureInfo>\n            <StyledSignatureName\n              style={{\n                margin: '0',\n                fontFamily: fonts.primary,\n                color: colors.red400\n              }}\n            >\n              {name || 'Peterson F. dos Santos'}\n            </StyledSignatureName>\n\n            <StyledSignatureRole\n              style={{\n                margin: '2px 0',\n                fontFamily: fonts.primary,\n                fontSize: '15px',\n                fontWeight: '700',\n                color: colors.black\n              }}\n            >\n              {role || 'Co-founder & CEO'}\n            </StyledSignatureRole>\n\n            <StyledSignatureEmail\n              style={{\n                margin: '2px 0',\n                fontFamily: fonts.secondary,\n                fontSize: '15px',\n                color: colors.gray400\n              }}\n            >\n              {email || 'peterson.santos@ateliware.com'}\n            </StyledSignatureEmail>\n\n            <StyledSignaturePhone\n              style={{\n                margin: '2px 0',\n                fontFamily: fonts.secondary,\n                fontSize: '15px',\n                color: colors.gray400\n              }}\n            >\n              +55 41 3010-2275\n            </StyledSignaturePhone>\n\n            {phone !== '' && (\n              <StyledSignaturePhone\n                style={{\n                  margin: '2px 0',\n                  fontFamily: fonts.secondary,\n                  fontSize: '15px',\n                  color: colors.gray400\n                }}\n              >\n                +55 {phone || '41 99999-9999'}\n              </StyledSignaturePhone>\n            )}\n          </StyledSignatureInfo>\n        </StyledSignaturePreview>\n      </StyledWrapper>\n    </StyledSignature>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator\n  ) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\n        'Error during service worker registration:',\n        error\n      );\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null &&\n          contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}